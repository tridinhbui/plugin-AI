import React from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { X, Clock, AlertTriangle, Coffee, BookOpen, Users, Search } from 'lucide-react'

interface CooldownModalProps {
  visible: boolean
  onClose: () => void
  dailyUsage: number
  dailyLimit: number
  remainingTime?: number
}

const CooldownModal: React.FC<CooldownModalProps> = ({ 
  visible, 
  onClose, 
  dailyUsage, 
  dailyLimit, 
  remainingTime = 0 
}) => {
  const isExhausted = dailyUsage >= dailyLimit
  const isOnCooldown = remainingTime > 0 && dailyUsage < dailyLimit

  return (
    <AnimatePresence>
      {visible && (
        <div className="fixed inset-0 bg-black/60 backdrop-blur-sm flex items-center justify-center z-50 p-4">
          <motion.div
            initial={{ opacity: 0, scale: 0.9, y: 20 }}
            animate={{ opacity: 1, scale: 1, y: 0 }}
            exit={{ opacity: 0, scale: 0.9, y: 20 }}
            className="bg-white rounded-2xl shadow-2xl max-w-lg w-full max-h-[90vh] overflow-y-auto"
          >
            {/* Header */}
            <div className="flex items-center justify-between p-6 border-b border-gray-200">
              <div className="flex items-center space-x-3">
                <div className={`w-12 h-12 rounded-xl flex items-center justify-center ${
                  isExhausted ? 'bg-red-100' : 'bg-orange-100'
                }`}>
                  {isExhausted ? (
                    <AlertTriangle className="text-red-600" size={24} />
                  ) : (
                    <Clock className="text-orange-600" size={24} />
                  )}
                </div>
                <div>
                  <h3 className="text-xl font-bold text-gray-900">
                    {isExhausted ? 'ƒê√£ h·∫øt l∆∞·ª£t h·ªèi' : 'ƒêang trong th·ªùi gian ch·ªù'}
                  </h3>
                  <p className="text-sm text-gray-600">
                    {isExhausted ? 'H√£y quay l·∫°i v√†o ng√†y mai' : 'Vui l√≤ng ch·ªù m·ªôt ch√∫t'}
                  </p>
                </div>
              </div>
              
              <button
                onClick={onClose}
                className="text-gray-400 hover:text-gray-600 hover:bg-gray-100 p-2 rounded-lg transition-all duration-200"
              >
                <X size={20} />
              </button>
            </div>

            {/* Content */}
            <div className="p-6">
              {/* Illustration */}
              <div className="text-center mb-6">
                <div className="text-6xl mb-4">
                  {isExhausted ? 'üö´' : '‚è≥'}
                </div>
                
                <h2 className="text-2xl font-bold text-gray-900 mb-3">
                  {isExhausted 
                    ? `B·∫°n ƒë√£ s·ª≠ d·ª•ng h·∫øt ${dailyLimit} c√¢u h·ªèi h√¥m nay!`
                    : 'H√£y ch·ªù m·ªôt ch√∫t ƒë·ªÉ ti·∫øp t·ª•c'
                  }
                </h2>
                
                <p className="text-gray-600 leading-relaxed">
                  {isExhausted 
                    ? 'ƒê√¢y l√† c∆° h·ªôi tuy·ªát v·ªùi ƒë·ªÉ ph√°t tri·ªÉn kh·∫£ nƒÉng t·ª± gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ c·ªßa b·∫°n.'
                    : 'Th·ªùi gian ch·ªù gi√∫p b·∫°n suy nghƒ© k·ªπ h∆°n tr∆∞·ªõc khi ƒë·∫∑t c√¢u h·ªèi ti·∫øp theo.'
                  }
                </p>
              </div>

              {/* Cooldown Timer */}
              {isOnCooldown && (
                <motion.div
                  initial={{ opacity: 0, scale: 0.9 }}
                  animate={{ opacity: 1, scale: 1 }}
                  className="mb-6 p-4 bg-orange-50 border border-orange-200 rounded-xl"
                >
                  <div className="flex items-center justify-center space-x-3">
                    <div className="w-10 h-10 bg-orange-100 rounded-full flex items-center justify-center">
                      <Clock className="text-orange-600" size={20} />
                    </div>
                    <div className="text-center">
                      <div className="text-2xl font-bold text-orange-700">
                        {Math.ceil(remainingTime)}
                      </div>
                      <div className="text-sm text-orange-600">ph√∫t c√≤n l·∫°i</div>
                    </div>
                  </div>
                </motion.div>
              )}

              {/* Usage Counter */}
              <div className="mb-6 p-4 bg-gray-50 border border-gray-200 rounded-xl">
                <div className="text-sm font-medium text-gray-700 mb-3 text-center">
                  S·ªë l∆∞·ª£t ƒë√£ s·ª≠ d·ª•ng h√¥m nay
                </div>
                <div className="flex items-center justify-center space-x-2 mb-3">
                  {Array.from({ length: dailyLimit }, (_, i) => (
                    <motion.div
                      key={i}
                      initial={{ scale: 0 }}
                      animate={{ scale: 1 }}
                      transition={{ delay: i * 0.1 }}
                      className={`w-4 h-4 rounded-full transition-colors duration-300 ${
                        i < dailyUsage ? 'bg-red-500' : 'bg-gray-300'
                      }`}
                    />
                  ))}
                </div>
                <div className="text-center text-sm text-gray-600">
                  <span className="font-semibold text-gray-900">{dailyUsage}</span>
                  /{dailyLimit} l∆∞·ª£t ƒë√£ s·ª≠ d·ª•ng
                </div>
              </div>

              {/* Tips */}
              <div className="bg-blue-50 border border-blue-200 rounded-xl p-5 mb-6">
                <h4 className="font-semibold text-blue-800 mb-4 flex items-center">
                  <BookOpen size={18} className="mr-2" />
                  üí° C√°c c√°ch thay th·∫ø hi·ªáu qu·∫£:
                </h4>
                <div className="grid grid-cols-1 gap-3">
                  <div className="flex items-start space-x-3">
                    <div className="w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center flex-shrink-0">
                      <Search size={16} className="text-blue-600" />
                    </div>
                    <div>
                      <div className="font-medium text-blue-800 text-sm">T√¨m ki·∫øm th√¥ng minh</div>
                      <div className="text-blue-700 text-xs">Google v·ªõi t·ª´ kh√≥a c·ª• th·ªÉ v√† r√µ r√†ng</div>
                    </div>
                  </div>
                  
                  <div className="flex items-start space-x-3">
                    <div className="w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center flex-shrink-0">
                      <BookOpen size={16} className="text-blue-600" />
                    </div>
                    <div>
                      <div className="font-medium text-blue-800 text-sm">ƒê·ªçc t√†i li·ªáu</div>
                      <div className="text-blue-700 text-xs">T√†i li·ªáu ch√≠nh th·ª©c v√† h∆∞·ªõng d·∫´n c√≥ s·∫µn</div>
                    </div>
                  </div>
                  
                  <div className="flex items-start space-x-3">
                    <div className="w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center flex-shrink-0">
                      <Users size={16} className="text-blue-600" />
                    </div>
                    <div>
                      <div className="font-medium text-blue-800 text-sm">Th·∫£o lu·∫≠n</div>
                      <div className="text-blue-700 text-xs">H·ªèi ƒë·ªìng nghi·ªáp ho·∫∑c c·ªông ƒë·ªìng developer</div>
                    </div>
                  </div>

                  <div className="flex items-start space-x-3">
                    <div className="w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center flex-shrink-0">
                      <Coffee size={16} className="text-blue-600" />
                    </div>
                    <div>
                      <div className="font-medium text-blue-800 text-sm">Ngh·ªâ ng∆°i</div>
                      <div className="text-blue-700 text-xs">ƒê√¥i khi gi·∫£i ph√°p ƒë·∫øn khi b·∫°n ngh·ªâ ng∆°i</div>
                    </div>
                  </div>
                </div>
              </div>

              {/* Motivation Quote */}
              <div className="bg-gradient-to-r from-purple-50 to-pink-50 border border-purple-200 rounded-xl p-4 mb-6">
                <div className="text-center">
                  <div className="text-3xl mb-2">üß†</div>
                  <blockquote className="text-purple-800 font-medium text-sm italic">
                    &ldquo;T√¥i kh√¥ng th·∫•t b·∫°i. T√¥i ch·ªâ t√¨m ra 10,000 c√°ch kh√¥ng ho·∫°t ƒë·ªông.&rdquo;
                  </blockquote>
                  <cite className="text-purple-600 text-xs mt-1 block">- Thomas Edison</cite>
                </div>
              </div>

              {/* Action Button */}
              <motion.button
                onClick={onClose}
                whileHover={{ scale: 1.02 }}
                whileTap={{ scale: 0.98 }}
                className="w-full bg-gray-900 text-white py-4 px-6 rounded-xl font-semibold hover:bg-gray-800 transition-all duration-200 shadow-lg"
              >
                {isExhausted ? 'T√¥i s·∫Ω t·ª± gi·∫£i quy·∫øt!' : 'T√¥i hi·ªÉu r·ªìi'}
              </motion.button>
            </div>

            {/* Footer Message */}
            <div className="px-6 pb-6">
              <div className="text-center text-sm text-gray-500 bg-gray-50 py-3 rounded-xl border">
                {isExhausted ? (
                  <span>üåÖ S·ªë l∆∞·ª£t s·∫Ω ƒë∆∞·ª£c reset v√†o l√∫c 00:00 ng√†y mai</span>
                ) : (
                  <span>‚è±Ô∏è H√£y s·ª≠ d·ª•ng th·ªùi gian n√†y ƒë·ªÉ suy nghƒ© s√¢u h∆°n</span>
                )}
              </div>
            </div>
          </motion.div>
        </div>
      )}
    </AnimatePresence>
  )
}

export default CooldownModal 